import Head from "next/head";
import styles from "../styles/Home.module.css";
import React from "react";
import Button from "@material-ui/core/Button";
import TextField from "@material-ui/core/TextField";
import { useFormik } from "formik";
import { validationsSchema } from "../utils/validationSchema";
import axios from "axios";

export default function Home() {
  const formik = useFormik({
    initialValues: {
      cardNumber: "",
      expirationDate: "",
      cvv: "",
      amount: "",
    },
    onSubmit: (values) => {
      const valueSend = {
        CardNumber: +values.cardNumber,
        ExpDate: values.expirationDate,
        Cvv: +values.cvv,
        Amount: +values.amount,
      };

      axios
        .post("http://localhost:3000/api/cards", {
          ...valueSend,
        })
        .then((response) => console.log(response.data));
    },
    validationSchema: validationsSchema,
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Send your card data</h1>

        <form onSubmit={formik.handleSubmit} className={styles.form}>
          <div className={styles.form__itemBox}>
            <TextField
              InputProps={{
                className: styles.form__item,
              }}
              InputLabelProps={{
                style: {
                  color: "white",
                },
              }}
              label="Card Number"
              id="cardNumber"
              name="cardNumber"
              variant="outlined"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              value={formik.values.email}
              fullWidth
            />
            {formik.errors.cardNumber && formik.touched.cardNumber && (
              <div className={styles.form__error}>
                {formik.errors.cardNumber}
              </div>
            )}
          </div>

          <div className={styles.form__itemBox}>
            <TextField
              InputProps={{
                className: styles.form__item,
              }}
              InputLabelProps={{
                style: {
                  color: "white",
                },
              }}
              label="Expiration Date (MM-YYYY)"
              id="expirationDate"
              name="expirationDate"
              variant="outlined"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              value={formik.values.email}
              fullWidth
            />
            {formik.errors.expirationDate && formik.touched.expirationDate && (
              <div className={styles.form__error}>
                {formik.errors.expirationDate}
              </div>
            )}
          </div>

          <div className={styles.form__itemBox}>
            <TextField
              InputProps={{
                className: styles.form__item,
              }}
              InputLabelProps={{
                style: {
                  color: "white",
                },
              }}
              label="CVV"
              id="cvv"
              name="cvv"
              variant="outlined"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              value={formik.values.email}
              fullWidth
            />
            {formik.errors.cvv && formik.touched.cvv && (
              <div className={styles.form__error}>{formik.errors.cvv}</div>
            )}
          </div>

          <div className={styles.form__itemBox}>
            <TextField
              InputProps={{
                className: styles.form__item,
              }}
              InputLabelProps={{
                style: {
                  color: "white",
                },
              }}
              label="Amount"
              id="amount"
              name="amount"
              variant="outlined"
              onChange={formik.handleChange}
              onBlur={formik.handleBlur}
              value={formik.values.email}
              fullWidth
            />
            {formik.errors.amount && formik.touched.amount && (
              <div className={styles.form__error}>{formik.errors.amount}</div>
            )}
          </div>

          <Button
            variant="contained"
            disabled={!(formik.isValid && formik.dirty)}
            type="submit"
          >
            Submit
          </Button>
        </form>
      </main>
    </div>
  );
}
